NEXT:
- Update Chrome Web Store description
Test JSON/XML APIs from within Chrome

Cookie support:
Automatically sends cookies from Chrome. This is extremely handy for APIs which require authentication. Simply authenticate via your browser as normal and JaSON will send cookies for requests which match.

HTTP methods:
GET, POST, PUT, PATCH, DELETE, HEAD, and OPTIONS

Request history:
Keeps request history with full text search. Individual history items can be deleted, or marked as a "favourite" for easy access. History from previous versions of JaSON will be automatically migrated. Stores history in IndexedDB for improved performance.

Dark/light theme:
Change the colour theme to suit your work environment.

Formatted input/output:
Provides an IDE like experience when editing request body and headers. Automatically formats request/response body syntax and colour based on content type.

Content type:
Supports JSON, XML, and form encoded data by default. Additional content types can be used by setting a custom content type header.

New and improved:
Completely re-written, new styling, layout, colours, additional features and improved performance.

Test release
  - partial release and test history migration

--------------------------------------------------------------------------------

ENHANCEMENTS:
- Set most recent history item on open?
- Add tooltip to request body to explain different formats
  - eg: how to use form data
  - vary based on content type?
- Clear history but keep favourites
  - Make this an option on the confirm dialog
- Provide contenxt menu option - "Open in JaSON"
  - https://developer.chrome.com/extensions/contextMenus
- When trimming history, don't remove favourites items?
- https://github.com/stutrek/dexie-hooks/blob/master/index.ts
- Validate body before send (maybe not mandatory)
- JaSON Website with video and screenshots (GitHub pages)
- Render images, other media types
- react-window (to handle large lists - use this for history)
  - https://github.com/bvaughn/react-window
- allow a file upload of a request body
- download as CURL (etc) for a request history item
- save history to dropbox or export somehow?
- share a history request with someone (export and email, click to send?)

NOTES:
- in responsive mode set dimensions to 1423x889 to get 1280x800 screenshots


--------------------------------------------------------------------------------

if (historyFilter.searchTerm === "history") {
      localStorage.setItem("JaSON.history", JSON.stringify(testHistory));
    }

const colorSchemes = [
  // { primary: "#fba875", secondary: "#b07466" }, // default for "dark" theme
  // { primary: "#515570", secondary: "#f85565" }, // default for "light" theme
  // { primary: "#d7d8dd", secondary: "#b07466" },
  // { primary: "#fba875", secondary: "#d7d8dd" },
  // { primary: "#d7d8dd", secondary: "#fba875" },
  // { primary: "#ffbb94", secondary: "#d7d8dd" },
  // { primary: "#d7d8dd", secondary: "#ffbb94" },
  // { primary: "#ffbb94", secondary: "#515570" },
  // { primary: "#e16428", secondary: "#f6e9e9" },
  // { primary: "#f8615a", secondary: "#ffd868" },
  // { primary: "#ff6363", secondary: "#ffbd69" },
  // { primary: "#ffa34d", secondary: "#f67575" },
];





if (maxLength) {
  const doc = editor.session.doc;
  doc.applyAnyDelta = doc.applyAnyDelta || doc.applyDelta;
  doc.applyDelta = function (delta: any) {
    const joinedLines = delta.lines.join("\n");
    const currentLength = this.getValue().length;
    const newLength = currentLength + joinedLines.length;
    if (delta.action === "insert" && newLength > maxLength) {
      const pasteLength = maxLength - currentLength;
      if (pasteLength > 0) {
        delta.lines = joinedLines.substr(0, pasteLength).split("\n");
        if (delta.lines.length === 1 && delta.start.row === delta.end.row) {
          delta.end = {
            row: delta.start.row,
            column: delta.start.column + pasteLength,
          };
        } else {
          delta.end = {
            row: delta.start.row + delta.lines.length,
            column: delta.lines[delta.lines.length - 1].length,
          };
        }
      } else {
        return false;
      }
    }
    return this.applyAnyDelta(delta);
  };
}