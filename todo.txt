NEXT:
- Clear history but keep favourites.
- Add logo attribution to About dialog
  - https://icon-icons.com/icon/friday-halloween-jason-movie/113258
  - Attribution details: https://creativecommons.org/licenses/by/4.0/

--------------------------------------------------------------------------------

TODO

- When trimming history, don't remove favourited items?
- request data - form encoded
  - Does Axios support this?
- Restrict size of response shown
- Migrate old history from previous version?
- New images for Chrome Web Store
- Update NOTICE
- Update screenshots
- Update Chrome Web Store description - specifically mention cookies
- Update readme.md
- react-window (to handle large lists - use this for history)
  - https://github.com/bvaughn/react-window


ENHANCEMENTS:
- https://github.com/stutrek/dexie-hooks/blob/master/index.ts
- Validate body before send (maybe not mandatory)
- JaSON Website with video and screenshots (GitHub pages)
- star a history item
- Render images, other media types

- allow a file upload of a request body
- download as CURL (etc) for a request history item
- save history to dropbox or export somehow?
- share a history request with someone (export and email, click to send?)
- group history by domain to make searching easier
- filter history by domain, content type, request method, response status etc...


NOTES:
- in responsive mode set dimensions to 1423x889 to get 1280x800 screenshots


--------------------------------------------------------------------------------

const colorSchemes = [
  // { primary: "#fba875", secondary: "#b07466" }, // default for "dark" theme
  // { primary: "#515570", secondary: "#f85565" }, // default for "light" theme
  // { primary: "#d7d8dd", secondary: "#b07466" },
  // { primary: "#fba875", secondary: "#d7d8dd" },
  // { primary: "#d7d8dd", secondary: "#fba875" },
  // { primary: "#ffbb94", secondary: "#d7d8dd" },
  // { primary: "#d7d8dd", secondary: "#ffbb94" },
  // { primary: "#ffbb94", secondary: "#515570" },
  // { primary: "#e16428", secondary: "#f6e9e9" },
  // { primary: "#f8615a", secondary: "#ffd868" },
  // { primary: "#ff6363", secondary: "#ffbd69" },
  // { primary: "#ffa34d", secondary: "#f67575" },
];





if (maxLength) {
  const doc = editor.session.doc;
  doc.applyAnyDelta = doc.applyAnyDelta || doc.applyDelta;
  doc.applyDelta = function (delta: any) {
    const joinedLines = delta.lines.join("\n");
    const currentLength = this.getValue().length;
    const newLength = currentLength + joinedLines.length;
    if (delta.action === "insert" && newLength > maxLength) {
      const pasteLength = maxLength - currentLength;
      if (pasteLength > 0) {
        delta.lines = joinedLines.substr(0, pasteLength).split("\n");
        if (delta.lines.length === 1 && delta.start.row === delta.end.row) {
          delta.end = {
            row: delta.start.row,
            column: delta.start.column + pasteLength,
          };
        } else {
          delta.end = {
            row: delta.start.row + delta.lines.length,
            column: delta.lines[delta.lines.length - 1].length,
          };
        }
      } else {
        return false;
      }
    }
    return this.applyAnyDelta(delta);
  };
}